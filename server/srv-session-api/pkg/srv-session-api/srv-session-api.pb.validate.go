// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kioku/srv-session-api/v1/srv-session-api.proto

package srv_session_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := EventValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProgressId() <= 0 {
		err := EventValidationError{
			field:  "ProgressId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSrsLevel() <= 0 {
		err := EventValidationError{
			field:  "SrsLevel",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Success

	if len(errors) > 0 {
		return EventMultiError(errors)
	}
	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on KanjiEventV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KanjiEventV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KanjiEventV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KanjiEventV1RequestMultiError, or nil if none found.
func (m *KanjiEventV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *KanjiEventV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KanjiEventV1RequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KanjiEventV1RequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KanjiEventV1RequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KanjiEventV1RequestMultiError(errors)
	}
	return nil
}

// KanjiEventV1RequestMultiError is an error wrapping multiple validation
// errors returned by KanjiEventV1Request.ValidateAll() if the designated
// constraints aren't met.
type KanjiEventV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KanjiEventV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KanjiEventV1RequestMultiError) AllErrors() []error { return m }

// KanjiEventV1RequestValidationError is the validation error returned by
// KanjiEventV1Request.Validate if the designated constraints aren't met.
type KanjiEventV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KanjiEventV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KanjiEventV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KanjiEventV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KanjiEventV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KanjiEventV1RequestValidationError) ErrorName() string {
	return "KanjiEventV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e KanjiEventV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKanjiEventV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KanjiEventV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KanjiEventV1RequestValidationError{}

// Validate checks the field values on WordEventV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WordEventV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordEventV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordEventV1RequestMultiError, or nil if none found.
func (m *WordEventV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *WordEventV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordEventV1RequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordEventV1RequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordEventV1RequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordEventV1RequestMultiError(errors)
	}
	return nil
}

// WordEventV1RequestMultiError is an error wrapping multiple validation errors
// returned by WordEventV1Request.ValidateAll() if the designated constraints
// aren't met.
type WordEventV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordEventV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordEventV1RequestMultiError) AllErrors() []error { return m }

// WordEventV1RequestValidationError is the validation error returned by
// WordEventV1Request.Validate if the designated constraints aren't met.
type WordEventV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordEventV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordEventV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordEventV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordEventV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordEventV1RequestValidationError) ErrorName() string {
	return "WordEventV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e WordEventV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordEventV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordEventV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordEventV1RequestValidationError{}

// Validate checks the field values on EventV1Reposnse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EventV1Reposnse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventV1Reposnse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventV1ReposnseMultiError, or nil if none found.
func (m *EventV1Reposnse) ValidateAll() error {
	return m.validate(true)
}

func (m *EventV1Reposnse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return EventV1ReposnseMultiError(errors)
	}
	return nil
}

// EventV1ReposnseMultiError is an error wrapping multiple validation errors
// returned by EventV1Reposnse.ValidateAll() if the designated constraints
// aren't met.
type EventV1ReposnseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventV1ReposnseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventV1ReposnseMultiError) AllErrors() []error { return m }

// EventV1ReposnseValidationError is the validation error returned by
// EventV1Reposnse.Validate if the designated constraints aren't met.
type EventV1ReposnseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventV1ReposnseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventV1ReposnseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventV1ReposnseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventV1ReposnseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventV1ReposnseValidationError) ErrorName() string { return "EventV1ReposnseValidationError" }

// Error satisfies the builtin error interface
func (e EventV1ReposnseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventV1Reposnse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventV1ReposnseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventV1ReposnseValidationError{}
