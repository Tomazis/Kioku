// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package srv_session_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvSessionApiClient is the client API for SrvSessionApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvSessionApiClient interface {
	KanjiEventV1(ctx context.Context, in *KanjiEventV1Request, opts ...grpc.CallOption) (*EventV1Reposnse, error)
	WordEventV1(ctx context.Context, in *WordEventV1Request, opts ...grpc.CallOption) (*EventV1Reposnse, error)
}

type srvSessionApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvSessionApiClient(cc grpc.ClientConnInterface) SrvSessionApiClient {
	return &srvSessionApiClient{cc}
}

func (c *srvSessionApiClient) KanjiEventV1(ctx context.Context, in *KanjiEventV1Request, opts ...grpc.CallOption) (*EventV1Reposnse, error) {
	out := new(EventV1Reposnse)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_session_api.v1.SrvSessionApi/KanjiEventV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvSessionApiClient) WordEventV1(ctx context.Context, in *WordEventV1Request, opts ...grpc.CallOption) (*EventV1Reposnse, error) {
	out := new(EventV1Reposnse)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_session_api.v1.SrvSessionApi/WordEventV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvSessionApiServer is the server API for SrvSessionApi service.
// All implementations must embed UnimplementedSrvSessionApiServer
// for forward compatibility
type SrvSessionApiServer interface {
	KanjiEventV1(context.Context, *KanjiEventV1Request) (*EventV1Reposnse, error)
	WordEventV1(context.Context, *WordEventV1Request) (*EventV1Reposnse, error)
	mustEmbedUnimplementedSrvSessionApiServer()
}

// UnimplementedSrvSessionApiServer must be embedded to have forward compatible implementations.
type UnimplementedSrvSessionApiServer struct {
}

func (UnimplementedSrvSessionApiServer) KanjiEventV1(context.Context, *KanjiEventV1Request) (*EventV1Reposnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KanjiEventV1 not implemented")
}
func (UnimplementedSrvSessionApiServer) WordEventV1(context.Context, *WordEventV1Request) (*EventV1Reposnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WordEventV1 not implemented")
}
func (UnimplementedSrvSessionApiServer) mustEmbedUnimplementedSrvSessionApiServer() {}

// UnsafeSrvSessionApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvSessionApiServer will
// result in compilation errors.
type UnsafeSrvSessionApiServer interface {
	mustEmbedUnimplementedSrvSessionApiServer()
}

func RegisterSrvSessionApiServer(s grpc.ServiceRegistrar, srv SrvSessionApiServer) {
	s.RegisterService(&SrvSessionApi_ServiceDesc, srv)
}

func _SrvSessionApi_KanjiEventV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KanjiEventV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvSessionApiServer).KanjiEventV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_session_api.v1.SrvSessionApi/KanjiEventV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvSessionApiServer).KanjiEventV1(ctx, req.(*KanjiEventV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvSessionApi_WordEventV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordEventV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvSessionApiServer).WordEventV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_session_api.v1.SrvSessionApi/WordEventV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvSessionApiServer).WordEventV1(ctx, req.(*WordEventV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvSessionApi_ServiceDesc is the grpc.ServiceDesc for SrvSessionApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvSessionApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kioku.server.srv_session_api.v1.SrvSessionApi",
	HandlerType: (*SrvSessionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KanjiEventV1",
			Handler:    _SrvSessionApi_KanjiEventV1_Handler,
		},
		{
			MethodName: "WordEventV1",
			Handler:    _SrvSessionApi_WordEventV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kioku/srv-session-api/v1/srv-session-api.proto",
}
