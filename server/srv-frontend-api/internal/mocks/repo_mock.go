// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/api.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tomazis/kioku/server/srv-frontend-api/internal/models/kanji"
	models0 "github.com/tomazis/kioku/server/srv-frontend-api/internal/models/word"
	srv_frontend_api "github.com/tomazis/kioku/server/srv-frontend-api/pkg/srv-frontend-api"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetKanji mocks base method.
func (m *MockRepo) GetKanji(ctx context.Context, kanjiID uint64) (*srv_frontend_api.GetKanjiV1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKanji", ctx, kanjiID)
	ret0, _ := ret[0].(*srv_frontend_api.GetKanjiV1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKanji indicates an expected call of GetKanji.
func (mr *MockRepoMockRecorder) GetKanji(ctx, kanjiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKanji", reflect.TypeOf((*MockRepo)(nil).GetKanji), ctx, kanjiID)
}

// GetWord mocks base method.
func (m *MockRepo) GetWord(ctx context.Context, wordID uint64) (*models0.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWord", ctx, wordID)
	ret0, _ := ret[0].(*models0.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWord indicates an expected call of GetWord.
func (mr *MockRepoMockRecorder) GetWord(ctx, wordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWord", reflect.TypeOf((*MockRepo)(nil).GetWord), ctx, wordID)
}

// ListKanji mocks base method.
func (m *MockRepo) ListKanji(ctx context.Context, level uint32) ([]*models.Kanji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKanji", ctx, level)
	ret0, _ := ret[0].([]*models.Kanji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKanji indicates an expected call of ListKanji.
func (mr *MockRepoMockRecorder) ListKanji(ctx, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKanji", reflect.TypeOf((*MockRepo)(nil).ListKanji), ctx, level)
}

// ListWordByKanji mocks base method.
func (m *MockRepo) ListWordByKanji(ctx context.Context, kanjiID uint64) ([]*models0.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWordByKanji", ctx, kanjiID)
	ret0, _ := ret[0].([]*models0.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWordByKanji indicates an expected call of ListWordByKanji.
func (mr *MockRepoMockRecorder) ListWordByKanji(ctx, kanjiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWordByKanji", reflect.TypeOf((*MockRepo)(nil).ListWordByKanji), ctx, kanjiID)
}

// ListWordsByLevel mocks base method.
func (m *MockRepo) ListWordsByLevel(ctx context.Context, level uint32) ([]*models0.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWordsByLevel", ctx, level)
	ret0, _ := ret[0].([]*models0.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWordsByLevel indicates an expected call of ListWordsByLevel.
func (mr *MockRepoMockRecorder) ListWordsByLevel(ctx, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWordsByLevel", reflect.TypeOf((*MockRepo)(nil).ListWordsByLevel), ctx, level)
}
