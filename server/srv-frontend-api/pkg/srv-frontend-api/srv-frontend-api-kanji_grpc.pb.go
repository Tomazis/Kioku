// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package srv_frontend_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvFrontendApiServiceClient is the client API for SrvFrontendApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvFrontendApiServiceClient interface {
	GetKanjiV1(ctx context.Context, in *GetKanjiV1Request, opts ...grpc.CallOption) (*GetKanjiV1Response, error)
	ListKanjiV1(ctx context.Context, in *ListKanjiV1Request, opts ...grpc.CallOption) (*ListKanjiV1Response, error)
}

type srvFrontendApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvFrontendApiServiceClient(cc grpc.ClientConnInterface) SrvFrontendApiServiceClient {
	return &srvFrontendApiServiceClient{cc}
}

func (c *srvFrontendApiServiceClient) GetKanjiV1(ctx context.Context, in *GetKanjiV1Request, opts ...grpc.CallOption) (*GetKanjiV1Response, error) {
	out := new(GetKanjiV1Response)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_frontend_api.v1.SrvFrontendApiService/GetKanjiV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvFrontendApiServiceClient) ListKanjiV1(ctx context.Context, in *ListKanjiV1Request, opts ...grpc.CallOption) (*ListKanjiV1Response, error) {
	out := new(ListKanjiV1Response)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_frontend_api.v1.SrvFrontendApiService/ListKanjiV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvFrontendApiServiceServer is the server API for SrvFrontendApiService service.
// All implementations must embed UnimplementedSrvFrontendApiServiceServer
// for forward compatibility
type SrvFrontendApiServiceServer interface {
	GetKanjiV1(context.Context, *GetKanjiV1Request) (*GetKanjiV1Response, error)
	ListKanjiV1(context.Context, *ListKanjiV1Request) (*ListKanjiV1Response, error)
	mustEmbedUnimplementedSrvFrontendApiServiceServer()
}

// UnimplementedSrvFrontendApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSrvFrontendApiServiceServer struct {
}

func (UnimplementedSrvFrontendApiServiceServer) GetKanjiV1(context.Context, *GetKanjiV1Request) (*GetKanjiV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKanjiV1 not implemented")
}
func (UnimplementedSrvFrontendApiServiceServer) ListKanjiV1(context.Context, *ListKanjiV1Request) (*ListKanjiV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKanjiV1 not implemented")
}
func (UnimplementedSrvFrontendApiServiceServer) mustEmbedUnimplementedSrvFrontendApiServiceServer() {}

// UnsafeSrvFrontendApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvFrontendApiServiceServer will
// result in compilation errors.
type UnsafeSrvFrontendApiServiceServer interface {
	mustEmbedUnimplementedSrvFrontendApiServiceServer()
}

func RegisterSrvFrontendApiServiceServer(s grpc.ServiceRegistrar, srv SrvFrontendApiServiceServer) {
	s.RegisterService(&SrvFrontendApiService_ServiceDesc, srv)
}

func _SrvFrontendApiService_GetKanjiV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKanjiV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvFrontendApiServiceServer).GetKanjiV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_frontend_api.v1.SrvFrontendApiService/GetKanjiV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvFrontendApiServiceServer).GetKanjiV1(ctx, req.(*GetKanjiV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvFrontendApiService_ListKanjiV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKanjiV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvFrontendApiServiceServer).ListKanjiV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_frontend_api.v1.SrvFrontendApiService/ListKanjiV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvFrontendApiServiceServer).ListKanjiV1(ctx, req.(*ListKanjiV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvFrontendApiService_ServiceDesc is the grpc.ServiceDesc for SrvFrontendApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvFrontendApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kioku.server.srv_frontend_api.v1.SrvFrontendApiService",
	HandlerType: (*SrvFrontendApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKanjiV1",
			Handler:    _SrvFrontendApiService_GetKanjiV1_Handler,
		},
		{
			MethodName: "ListKanjiV1",
			Handler:    _SrvFrontendApiService_ListKanjiV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kioku/srv-frontend-api/v1/srv-frontend-api-kanji.proto",
}
