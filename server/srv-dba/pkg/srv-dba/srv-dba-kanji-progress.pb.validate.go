// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kioku/srv-dba/v1/srv-dba-kanji-progress.proto

package srv_dba

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on KanjiProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KanjiProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KanjiProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KanjiProgressMultiError, or
// nil if none found.
func (m *KanjiProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *KanjiProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetKanji()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "Kanji",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "Kanji",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKanji()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KanjiProgressValidationError{
				field:  "Kanji",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SrsLevel

	if all {
		switch v := interface{}(m.GetUnlockDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "UnlockDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "UnlockDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnlockDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KanjiProgressValidationError{
				field:  "UnlockDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNextDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KanjiProgressValidationError{
				field:  "NextDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBurnDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KanjiProgressValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBurnDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KanjiProgressValidationError{
				field:  "BurnDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KanjiProgressMultiError(errors)
	}
	return nil
}

// KanjiProgressMultiError is an error wrapping multiple validation errors
// returned by KanjiProgress.ValidateAll() if the designated constraints
// aren't met.
type KanjiProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KanjiProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KanjiProgressMultiError) AllErrors() []error { return m }

// KanjiProgressValidationError is the validation error returned by
// KanjiProgress.Validate if the designated constraints aren't met.
type KanjiProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KanjiProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KanjiProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KanjiProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KanjiProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KanjiProgressValidationError) ErrorName() string { return "KanjiProgressValidationError" }

// Error satisfies the builtin error interface
func (e KanjiProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKanjiProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KanjiProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KanjiProgressValidationError{}

// Validate checks the field values on GetKanjiProgressByIdV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKanjiProgressByIdV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKanjiProgressByIdV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKanjiProgressByIdV1RequestMultiError, or nil if none found.
func (m *GetKanjiProgressByIdV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKanjiProgressByIdV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetKanjiProgressByIdV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetKanjiId() <= 0 {
		err := GetKanjiProgressByIdV1RequestValidationError{
			field:  "KanjiId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetKanjiProgressByIdV1RequestMultiError(errors)
	}
	return nil
}

// GetKanjiProgressByIdV1RequestMultiError is an error wrapping multiple
// validation errors returned by GetKanjiProgressByIdV1Request.ValidateAll()
// if the designated constraints aren't met.
type GetKanjiProgressByIdV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKanjiProgressByIdV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKanjiProgressByIdV1RequestMultiError) AllErrors() []error { return m }

// GetKanjiProgressByIdV1RequestValidationError is the validation error
// returned by GetKanjiProgressByIdV1Request.Validate if the designated
// constraints aren't met.
type GetKanjiProgressByIdV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKanjiProgressByIdV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKanjiProgressByIdV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKanjiProgressByIdV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKanjiProgressByIdV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKanjiProgressByIdV1RequestValidationError) ErrorName() string {
	return "GetKanjiProgressByIdV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKanjiProgressByIdV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKanjiProgressByIdV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKanjiProgressByIdV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKanjiProgressByIdV1RequestValidationError{}

// Validate checks the field values on GetKanjiProgressByIdV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKanjiProgressByIdV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKanjiProgressByIdV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKanjiProgressByIdV1ResponseMultiError, or nil if none found.
func (m *GetKanjiProgressByIdV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKanjiProgressByIdV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKanjiProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKanjiProgressByIdV1ResponseValidationError{
					field:  "KanjiProgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKanjiProgressByIdV1ResponseValidationError{
					field:  "KanjiProgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKanjiProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKanjiProgressByIdV1ResponseValidationError{
				field:  "KanjiProgress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKanjiProgressByIdV1ResponseMultiError(errors)
	}
	return nil
}

// GetKanjiProgressByIdV1ResponseMultiError is an error wrapping multiple
// validation errors returned by GetKanjiProgressByIdV1Response.ValidateAll()
// if the designated constraints aren't met.
type GetKanjiProgressByIdV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKanjiProgressByIdV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKanjiProgressByIdV1ResponseMultiError) AllErrors() []error { return m }

// GetKanjiProgressByIdV1ResponseValidationError is the validation error
// returned by GetKanjiProgressByIdV1Response.Validate if the designated
// constraints aren't met.
type GetKanjiProgressByIdV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKanjiProgressByIdV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKanjiProgressByIdV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKanjiProgressByIdV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKanjiProgressByIdV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKanjiProgressByIdV1ResponseValidationError) ErrorName() string {
	return "GetKanjiProgressByIdV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKanjiProgressByIdV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKanjiProgressByIdV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKanjiProgressByIdV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKanjiProgressByIdV1ResponseValidationError{}

// Validate checks the field values on ListKanjiProgressByIdsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKanjiProgressByIdsV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiProgressByIdsV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKanjiProgressByIdsV1RequestMultiError, or nil if none found.
func (m *ListKanjiProgressByIdsV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiProgressByIdsV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListKanjiProgressByIdsV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKanjiId() {
		_, _ = idx, item

		if item <= 0 {
			err := ListKanjiProgressByIdsV1RequestValidationError{
				field:  fmt.Sprintf("KanjiId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListKanjiProgressByIdsV1RequestMultiError(errors)
	}
	return nil
}

// ListKanjiProgressByIdsV1RequestMultiError is an error wrapping multiple
// validation errors returned by ListKanjiProgressByIdsV1Request.ValidateAll()
// if the designated constraints aren't met.
type ListKanjiProgressByIdsV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiProgressByIdsV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiProgressByIdsV1RequestMultiError) AllErrors() []error { return m }

// ListKanjiProgressByIdsV1RequestValidationError is the validation error
// returned by ListKanjiProgressByIdsV1Request.Validate if the designated
// constraints aren't met.
type ListKanjiProgressByIdsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiProgressByIdsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiProgressByIdsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiProgressByIdsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiProgressByIdsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiProgressByIdsV1RequestValidationError) ErrorName() string {
	return "ListKanjiProgressByIdsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiProgressByIdsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiProgressByIdsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiProgressByIdsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiProgressByIdsV1RequestValidationError{}

// Validate checks the field values on ListKanjiProgressByTimeV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListKanjiProgressByTimeV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiProgressByTimeV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListKanjiProgressByTimeV1RequestMultiError, or nil if none found.
func (m *ListKanjiProgressByTimeV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiProgressByTimeV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListKanjiProgressByTimeV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListKanjiProgressByTimeV1RequestMultiError(errors)
	}
	return nil
}

// ListKanjiProgressByTimeV1RequestMultiError is an error wrapping multiple
// validation errors returned by
// ListKanjiProgressByTimeV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListKanjiProgressByTimeV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiProgressByTimeV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiProgressByTimeV1RequestMultiError) AllErrors() []error { return m }

// ListKanjiProgressByTimeV1RequestValidationError is the validation error
// returned by ListKanjiProgressByTimeV1Request.Validate if the designated
// constraints aren't met.
type ListKanjiProgressByTimeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiProgressByTimeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiProgressByTimeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiProgressByTimeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiProgressByTimeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiProgressByTimeV1RequestValidationError) ErrorName() string {
	return "ListKanjiProgressByTimeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiProgressByTimeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiProgressByTimeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiProgressByTimeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiProgressByTimeV1RequestValidationError{}

// Validate checks the field values on ListKanjiProgressBySrsLevelV1Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListKanjiProgressBySrsLevelV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiProgressBySrsLevelV1Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListKanjiProgressBySrsLevelV1RequestMultiError, or nil if none found.
func (m *ListKanjiProgressBySrsLevelV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiProgressBySrsLevelV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListKanjiProgressBySrsLevelV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSrsLevel() <= 0 {
		err := ListKanjiProgressBySrsLevelV1RequestValidationError{
			field:  "SrsLevel",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListKanjiProgressBySrsLevelV1RequestMultiError(errors)
	}
	return nil
}

// ListKanjiProgressBySrsLevelV1RequestMultiError is an error wrapping multiple
// validation errors returned by
// ListKanjiProgressBySrsLevelV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListKanjiProgressBySrsLevelV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiProgressBySrsLevelV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiProgressBySrsLevelV1RequestMultiError) AllErrors() []error { return m }

// ListKanjiProgressBySrsLevelV1RequestValidationError is the validation error
// returned by ListKanjiProgressBySrsLevelV1Request.Validate if the designated
// constraints aren't met.
type ListKanjiProgressBySrsLevelV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) ErrorName() string {
	return "ListKanjiProgressBySrsLevelV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiProgressBySrsLevelV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiProgressBySrsLevelV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiProgressBySrsLevelV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiProgressBySrsLevelV1RequestValidationError{}

// Validate checks the field values on ListKanjiProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKanjiProgressV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKanjiProgressV1ResponseMultiError, or nil if none found.
func (m *ListKanjiProgressV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiProgressV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKanjiProgress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKanjiProgressV1ResponseValidationError{
						field:  fmt.Sprintf("KanjiProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKanjiProgressV1ResponseValidationError{
						field:  fmt.Sprintf("KanjiProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKanjiProgressV1ResponseValidationError{
					field:  fmt.Sprintf("KanjiProgress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKanjiProgressV1ResponseMultiError(errors)
	}
	return nil
}

// ListKanjiProgressV1ResponseMultiError is an error wrapping multiple
// validation errors returned by ListKanjiProgressV1Response.ValidateAll() if
// the designated constraints aren't met.
type ListKanjiProgressV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiProgressV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiProgressV1ResponseMultiError) AllErrors() []error { return m }

// ListKanjiProgressV1ResponseValidationError is the validation error returned
// by ListKanjiProgressV1Response.Validate if the designated constraints
// aren't met.
type ListKanjiProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiProgressV1ResponseValidationError) ErrorName() string {
	return "ListKanjiProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiProgressV1ResponseValidationError{}
