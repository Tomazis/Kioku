// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kioku/srv-dba/v1/srv-dba-word-progress.proto

package srv_dba

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WordProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordProgressMultiError, or
// nil if none found.
func (m *WordProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *WordProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetWord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordProgressValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SrsLevel

	if all {
		switch v := interface{}(m.GetUnlockDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "UnlockDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "UnlockDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnlockDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordProgressValidationError{
				field:  "UnlockDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNextDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordProgressValidationError{
				field:  "NextDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBurnDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordProgressValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBurnDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordProgressValidationError{
				field:  "BurnDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordProgressMultiError(errors)
	}
	return nil
}

// WordProgressMultiError is an error wrapping multiple validation errors
// returned by WordProgress.ValidateAll() if the designated constraints aren't met.
type WordProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordProgressMultiError) AllErrors() []error { return m }

// WordProgressValidationError is the validation error returned by
// WordProgress.Validate if the designated constraints aren't met.
type WordProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordProgressValidationError) ErrorName() string { return "WordProgressValidationError" }

// Error satisfies the builtin error interface
func (e WordProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordProgressValidationError{}

// Validate checks the field values on GetWordProgressByIdV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWordProgressByIdV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWordProgressByIdV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWordProgressByIdV1RequestMultiError, or nil if none found.
func (m *GetWordProgressByIdV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWordProgressByIdV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetWordProgressByIdV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWordId() <= 0 {
		err := GetWordProgressByIdV1RequestValidationError{
			field:  "WordId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWordProgressByIdV1RequestMultiError(errors)
	}
	return nil
}

// GetWordProgressByIdV1RequestMultiError is an error wrapping multiple
// validation errors returned by GetWordProgressByIdV1Request.ValidateAll() if
// the designated constraints aren't met.
type GetWordProgressByIdV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWordProgressByIdV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWordProgressByIdV1RequestMultiError) AllErrors() []error { return m }

// GetWordProgressByIdV1RequestValidationError is the validation error returned
// by GetWordProgressByIdV1Request.Validate if the designated constraints
// aren't met.
type GetWordProgressByIdV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWordProgressByIdV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWordProgressByIdV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWordProgressByIdV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWordProgressByIdV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWordProgressByIdV1RequestValidationError) ErrorName() string {
	return "GetWordProgressByIdV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWordProgressByIdV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWordProgressByIdV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWordProgressByIdV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWordProgressByIdV1RequestValidationError{}

// Validate checks the field values on GetWordProgressByIdV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWordProgressByIdV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWordProgressByIdV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWordProgressByIdV1ResponseMultiError, or nil if none found.
func (m *GetWordProgressByIdV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWordProgressByIdV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWordProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWordProgressByIdV1ResponseValidationError{
					field:  "WordProgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWordProgressByIdV1ResponseValidationError{
					field:  "WordProgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWordProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWordProgressByIdV1ResponseValidationError{
				field:  "WordProgress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWordProgressByIdV1ResponseMultiError(errors)
	}
	return nil
}

// GetWordProgressByIdV1ResponseMultiError is an error wrapping multiple
// validation errors returned by GetWordProgressByIdV1Response.ValidateAll()
// if the designated constraints aren't met.
type GetWordProgressByIdV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWordProgressByIdV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWordProgressByIdV1ResponseMultiError) AllErrors() []error { return m }

// GetWordProgressByIdV1ResponseValidationError is the validation error
// returned by GetWordProgressByIdV1Response.Validate if the designated
// constraints aren't met.
type GetWordProgressByIdV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWordProgressByIdV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWordProgressByIdV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWordProgressByIdV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWordProgressByIdV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWordProgressByIdV1ResponseValidationError) ErrorName() string {
	return "GetWordProgressByIdV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWordProgressByIdV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWordProgressByIdV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWordProgressByIdV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWordProgressByIdV1ResponseValidationError{}

// Validate checks the field values on ListWordProgressByIdsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWordProgressByIdsV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordProgressByIdsV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWordProgressByIdsV1RequestMultiError, or nil if none found.
func (m *ListWordProgressByIdsV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordProgressByIdsV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListWordProgressByIdsV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetWordId() {
		_, _ = idx, item

		if item <= 0 {
			err := ListWordProgressByIdsV1RequestValidationError{
				field:  fmt.Sprintf("WordId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListWordProgressByIdsV1RequestMultiError(errors)
	}
	return nil
}

// ListWordProgressByIdsV1RequestMultiError is an error wrapping multiple
// validation errors returned by ListWordProgressByIdsV1Request.ValidateAll()
// if the designated constraints aren't met.
type ListWordProgressByIdsV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordProgressByIdsV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordProgressByIdsV1RequestMultiError) AllErrors() []error { return m }

// ListWordProgressByIdsV1RequestValidationError is the validation error
// returned by ListWordProgressByIdsV1Request.Validate if the designated
// constraints aren't met.
type ListWordProgressByIdsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordProgressByIdsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordProgressByIdsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordProgressByIdsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordProgressByIdsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordProgressByIdsV1RequestValidationError) ErrorName() string {
	return "ListWordProgressByIdsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordProgressByIdsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordProgressByIdsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordProgressByIdsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordProgressByIdsV1RequestValidationError{}

// Validate checks the field values on ListWordProgressByTimeV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWordProgressByTimeV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordProgressByTimeV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWordProgressByTimeV1RequestMultiError, or nil if none found.
func (m *ListWordProgressByTimeV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordProgressByTimeV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListWordProgressByTimeV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() >= 1000 {
		err := ListWordProgressByTimeV1RequestValidationError{
			field:  "Limit",
			reason: "value must be less than 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListWordProgressByTimeV1RequestMultiError(errors)
	}
	return nil
}

// ListWordProgressByTimeV1RequestMultiError is an error wrapping multiple
// validation errors returned by ListWordProgressByTimeV1Request.ValidateAll()
// if the designated constraints aren't met.
type ListWordProgressByTimeV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordProgressByTimeV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordProgressByTimeV1RequestMultiError) AllErrors() []error { return m }

// ListWordProgressByTimeV1RequestValidationError is the validation error
// returned by ListWordProgressByTimeV1Request.Validate if the designated
// constraints aren't met.
type ListWordProgressByTimeV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordProgressByTimeV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordProgressByTimeV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordProgressByTimeV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordProgressByTimeV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordProgressByTimeV1RequestValidationError) ErrorName() string {
	return "ListWordProgressByTimeV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordProgressByTimeV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordProgressByTimeV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordProgressByTimeV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordProgressByTimeV1RequestValidationError{}

// Validate checks the field values on ListWordProgressBySrsLevelV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWordProgressBySrsLevelV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordProgressBySrsLevelV1Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWordProgressBySrsLevelV1RequestMultiError, or nil if none found.
func (m *ListWordProgressBySrsLevelV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordProgressBySrsLevelV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListWordProgressBySrsLevelV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSrsLevel(); val <= 0 || val > 9 {
		err := ListWordProgressBySrsLevelV1RequestValidationError{
			field:  "SrsLevel",
			reason: "value must be inside range (0, 9]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() >= 1000 {
		err := ListWordProgressBySrsLevelV1RequestValidationError{
			field:  "Limit",
			reason: "value must be less than 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListWordProgressBySrsLevelV1RequestMultiError(errors)
	}
	return nil
}

// ListWordProgressBySrsLevelV1RequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWordProgressBySrsLevelV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListWordProgressBySrsLevelV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordProgressBySrsLevelV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordProgressBySrsLevelV1RequestMultiError) AllErrors() []error { return m }

// ListWordProgressBySrsLevelV1RequestValidationError is the validation error
// returned by ListWordProgressBySrsLevelV1Request.Validate if the designated
// constraints aren't met.
type ListWordProgressBySrsLevelV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordProgressBySrsLevelV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordProgressBySrsLevelV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordProgressBySrsLevelV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordProgressBySrsLevelV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordProgressBySrsLevelV1RequestValidationError) ErrorName() string {
	return "ListWordProgressBySrsLevelV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordProgressBySrsLevelV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordProgressBySrsLevelV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordProgressBySrsLevelV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordProgressBySrsLevelV1RequestValidationError{}

// Validate checks the field values on ListWordProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWordProgressV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWordProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWordProgressV1ResponseMultiError, or nil if none found.
func (m *ListWordProgressV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWordProgressV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWordProgress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWordProgressV1ResponseValidationError{
						field:  fmt.Sprintf("WordProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWordProgressV1ResponseValidationError{
						field:  fmt.Sprintf("WordProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWordProgressV1ResponseValidationError{
					field:  fmt.Sprintf("WordProgress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWordProgressV1ResponseMultiError(errors)
	}
	return nil
}

// ListWordProgressV1ResponseMultiError is an error wrapping multiple
// validation errors returned by ListWordProgressV1Response.ValidateAll() if
// the designated constraints aren't met.
type ListWordProgressV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWordProgressV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWordProgressV1ResponseMultiError) AllErrors() []error { return m }

// ListWordProgressV1ResponseValidationError is the validation error returned
// by ListWordProgressV1Response.Validate if the designated constraints aren't met.
type ListWordProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWordProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWordProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWordProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWordProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWordProgressV1ResponseValidationError) ErrorName() string {
	return "ListWordProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWordProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWordProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWordProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWordProgressV1ResponseValidationError{}

// Validate checks the field values on AddWordProgressV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWordProgressV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWordProgressV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWordProgressV1RequestMultiError, or nil if none found.
func (m *AddWordProgressV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWordProgressV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AddWordProgressV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetWordId() {
		_, _ = idx, item

		if item <= 0 {
			err := AddWordProgressV1RequestValidationError{
				field:  fmt.Sprintf("WordId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddWordProgressV1RequestMultiError(errors)
	}
	return nil
}

// AddWordProgressV1RequestMultiError is an error wrapping multiple validation
// errors returned by AddWordProgressV1Request.ValidateAll() if the designated
// constraints aren't met.
type AddWordProgressV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWordProgressV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWordProgressV1RequestMultiError) AllErrors() []error { return m }

// AddWordProgressV1RequestValidationError is the validation error returned by
// AddWordProgressV1Request.Validate if the designated constraints aren't met.
type AddWordProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWordProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWordProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWordProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWordProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWordProgressV1RequestValidationError) ErrorName() string {
	return "AddWordProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddWordProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWordProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWordProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWordProgressV1RequestValidationError{}

// Validate checks the field values on UpdateWordProgressV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWordProgressV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWordProgressV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWordProgressV1RequestMultiError, or nil if none found.
func (m *UpdateWordProgressV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWordProgressV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProgressId() <= 0 {
		err := UpdateWordProgressV1RequestValidationError{
			field:  "ProgressId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSrsLevel(); val <= 0 || val > 9 {
		err := UpdateWordProgressV1RequestValidationError{
			field:  "SrsLevel",
			reason: "value must be inside range (0, 9]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNextDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWordProgressV1RequestValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWordProgressV1RequestValidationError{
					field:  "NextDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWordProgressV1RequestValidationError{
				field:  "NextDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBurnDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWordProgressV1RequestValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWordProgressV1RequestValidationError{
					field:  "BurnDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBurnDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWordProgressV1RequestValidationError{
				field:  "BurnDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWordProgressV1RequestMultiError(errors)
	}
	return nil
}

// UpdateWordProgressV1RequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWordProgressV1Request.ValidateAll() if
// the designated constraints aren't met.
type UpdateWordProgressV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWordProgressV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWordProgressV1RequestMultiError) AllErrors() []error { return m }

// UpdateWordProgressV1RequestValidationError is the validation error returned
// by UpdateWordProgressV1Request.Validate if the designated constraints
// aren't met.
type UpdateWordProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWordProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWordProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWordProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWordProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWordProgressV1RequestValidationError) ErrorName() string {
	return "UpdateWordProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWordProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWordProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWordProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWordProgressV1RequestValidationError{}

// Validate checks the field values on DefaultWordProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DefaultWordProgressV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DefaultWordProgressV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DefaultWordProgressV1ResponseMultiError, or nil if none found.
func (m *DefaultWordProgressV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DefaultWordProgressV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DefaultWordProgressV1ResponseMultiError(errors)
	}
	return nil
}

// DefaultWordProgressV1ResponseMultiError is an error wrapping multiple
// validation errors returned by DefaultWordProgressV1Response.ValidateAll()
// if the designated constraints aren't met.
type DefaultWordProgressV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DefaultWordProgressV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DefaultWordProgressV1ResponseMultiError) AllErrors() []error { return m }

// DefaultWordProgressV1ResponseValidationError is the validation error
// returned by DefaultWordProgressV1Response.Validate if the designated
// constraints aren't met.
type DefaultWordProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DefaultWordProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DefaultWordProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DefaultWordProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DefaultWordProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DefaultWordProgressV1ResponseValidationError) ErrorName() string {
	return "DefaultWordProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DefaultWordProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDefaultWordProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DefaultWordProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DefaultWordProgressV1ResponseValidationError{}
