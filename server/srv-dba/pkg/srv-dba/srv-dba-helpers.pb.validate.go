// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kioku/srv-dba/v1/srv-dba-helpers.proto

package srv_dba

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Counter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Counter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Counter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CounterMultiError, or nil if none found.
func (m *Counter) ValidateAll() error {
	return m.validate(true)
}

func (m *Counter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KanjiCount

	// no validation rules for UserKanjiCount

	// no validation rules for WordsCount

	// no validation rules for UserWordsCount

	if len(errors) > 0 {
		return CounterMultiError(errors)
	}
	return nil
}

// CounterMultiError is an error wrapping multiple validation errors returned
// by Counter.ValidateAll() if the designated constraints aren't met.
type CounterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CounterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CounterMultiError) AllErrors() []error { return m }

// CounterValidationError is the validation error returned by Counter.Validate
// if the designated constraints aren't met.
type CounterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CounterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CounterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CounterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CounterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CounterValidationError) ErrorName() string { return "CounterValidationError" }

// Error satisfies the builtin error interface
func (e CounterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CounterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CounterValidationError{}

// Validate checks the field values on GetCounterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCounterV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCounterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCounterV1RequestMultiError, or nil if none found.
func (m *GetCounterV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCounterV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetCounterV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLevel() <= 0 {
		err := GetCounterV1RequestValidationError{
			field:  "Level",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCounterV1RequestMultiError(errors)
	}
	return nil
}

// GetCounterV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetCounterV1Request.ValidateAll() if the designated
// constraints aren't met.
type GetCounterV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCounterV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCounterV1RequestMultiError) AllErrors() []error { return m }

// GetCounterV1RequestValidationError is the validation error returned by
// GetCounterV1Request.Validate if the designated constraints aren't met.
type GetCounterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCounterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCounterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCounterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCounterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCounterV1RequestValidationError) ErrorName() string {
	return "GetCounterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCounterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCounterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCounterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCounterV1RequestValidationError{}

// Validate checks the field values on GetCounterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCounterV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCounterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCounterV1ResponseMultiError, or nil if none found.
func (m *GetCounterV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCounterV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCounter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCounterV1ResponseValidationError{
					field:  "Counter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCounterV1ResponseValidationError{
					field:  "Counter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCounter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCounterV1ResponseValidationError{
				field:  "Counter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCounterV1ResponseMultiError(errors)
	}
	return nil
}

// GetCounterV1ResponseMultiError is an error wrapping multiple validation
// errors returned by GetCounterV1Response.ValidateAll() if the designated
// constraints aren't met.
type GetCounterV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCounterV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCounterV1ResponseMultiError) AllErrors() []error { return m }

// GetCounterV1ResponseValidationError is the validation error returned by
// GetCounterV1Response.Validate if the designated constraints aren't met.
type GetCounterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCounterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCounterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCounterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCounterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCounterV1ResponseValidationError) ErrorName() string {
	return "GetCounterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCounterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCounterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCounterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCounterV1ResponseValidationError{}
