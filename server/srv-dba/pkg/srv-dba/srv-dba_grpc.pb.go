// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package srv_dba

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvDbaServiceClient is the client API for SrvDbaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvDbaServiceClient interface {
	//Kanji part
	GetKanjiV1(ctx context.Context, in *GetKanjiV1Request, opts ...grpc.CallOption) (*GetKanjiV1Response, error)
	ListKanjiV1(ctx context.Context, in *ListKanjiV1Request, opts ...grpc.CallOption) (*ListKanjiV1Response, error)
}

type srvDbaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvDbaServiceClient(cc grpc.ClientConnInterface) SrvDbaServiceClient {
	return &srvDbaServiceClient{cc}
}

func (c *srvDbaServiceClient) GetKanjiV1(ctx context.Context, in *GetKanjiV1Request, opts ...grpc.CallOption) (*GetKanjiV1Response, error) {
	out := new(GetKanjiV1Response)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_dba.v1.SrvDbaService/GetKanjiV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvDbaServiceClient) ListKanjiV1(ctx context.Context, in *ListKanjiV1Request, opts ...grpc.CallOption) (*ListKanjiV1Response, error) {
	out := new(ListKanjiV1Response)
	err := c.cc.Invoke(ctx, "/kioku.server.srv_dba.v1.SrvDbaService/ListKanjiV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvDbaServiceServer is the server API for SrvDbaService service.
// All implementations must embed UnimplementedSrvDbaServiceServer
// for forward compatibility
type SrvDbaServiceServer interface {
	//Kanji part
	GetKanjiV1(context.Context, *GetKanjiV1Request) (*GetKanjiV1Response, error)
	ListKanjiV1(context.Context, *ListKanjiV1Request) (*ListKanjiV1Response, error)
	mustEmbedUnimplementedSrvDbaServiceServer()
}

// UnimplementedSrvDbaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSrvDbaServiceServer struct {
}

func (UnimplementedSrvDbaServiceServer) GetKanjiV1(context.Context, *GetKanjiV1Request) (*GetKanjiV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKanjiV1 not implemented")
}
func (UnimplementedSrvDbaServiceServer) ListKanjiV1(context.Context, *ListKanjiV1Request) (*ListKanjiV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKanjiV1 not implemented")
}
func (UnimplementedSrvDbaServiceServer) mustEmbedUnimplementedSrvDbaServiceServer() {}

// UnsafeSrvDbaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvDbaServiceServer will
// result in compilation errors.
type UnsafeSrvDbaServiceServer interface {
	mustEmbedUnimplementedSrvDbaServiceServer()
}

func RegisterSrvDbaServiceServer(s grpc.ServiceRegistrar, srv SrvDbaServiceServer) {
	s.RegisterService(&SrvDbaService_ServiceDesc, srv)
}

func _SrvDbaService_GetKanjiV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKanjiV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvDbaServiceServer).GetKanjiV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_dba.v1.SrvDbaService/GetKanjiV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvDbaServiceServer).GetKanjiV1(ctx, req.(*GetKanjiV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrvDbaService_ListKanjiV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKanjiV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvDbaServiceServer).ListKanjiV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kioku.server.srv_dba.v1.SrvDbaService/ListKanjiV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvDbaServiceServer).ListKanjiV1(ctx, req.(*ListKanjiV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvDbaService_ServiceDesc is the grpc.ServiceDesc for SrvDbaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvDbaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kioku.server.srv_dba.v1.SrvDbaService",
	HandlerType: (*SrvDbaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKanjiV1",
			Handler:    _SrvDbaService_GetKanjiV1_Handler,
		},
		{
			MethodName: "ListKanjiV1",
			Handler:    _SrvDbaService_ListKanjiV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kioku/srv-dba/v1/srv-dba.proto",
}
