// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kioku/srv-dba/v1/srv-dba-kanji.proto

package srv_dba

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Kanji with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Kanji) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Kanji with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KanjiMultiError, or nil if none found.
func (m *Kanji) ValidateAll() error {
	return m.validate(true)
}

func (m *Kanji) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Kanji

	// no validation rules for Primary

	// no validation rules for Level

	if len(errors) > 0 {
		return KanjiMultiError(errors)
	}
	return nil
}

// KanjiMultiError is an error wrapping multiple validation errors returned by
// Kanji.ValidateAll() if the designated constraints aren't met.
type KanjiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KanjiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KanjiMultiError) AllErrors() []error { return m }

// KanjiValidationError is the validation error returned by Kanji.Validate if
// the designated constraints aren't met.
type KanjiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KanjiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KanjiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KanjiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KanjiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KanjiValidationError) ErrorName() string { return "KanjiValidationError" }

// Error satisfies the builtin error interface
func (e KanjiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKanji.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KanjiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KanjiValidationError{}

// Validate checks the field values on GetKanjiByIdV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKanjiByIdV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKanjiByIdV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKanjiByIdV1RequestMultiError, or nil if none found.
func (m *GetKanjiByIdV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKanjiByIdV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetKanjiId() <= 0 {
		err := GetKanjiByIdV1RequestValidationError{
			field:  "KanjiId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetKanjiByIdV1RequestMultiError(errors)
	}
	return nil
}

// GetKanjiByIdV1RequestMultiError is an error wrapping multiple validation
// errors returned by GetKanjiByIdV1Request.ValidateAll() if the designated
// constraints aren't met.
type GetKanjiByIdV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKanjiByIdV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKanjiByIdV1RequestMultiError) AllErrors() []error { return m }

// GetKanjiByIdV1RequestValidationError is the validation error returned by
// GetKanjiByIdV1Request.Validate if the designated constraints aren't met.
type GetKanjiByIdV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKanjiByIdV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKanjiByIdV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKanjiByIdV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKanjiByIdV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKanjiByIdV1RequestValidationError) ErrorName() string {
	return "GetKanjiByIdV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKanjiByIdV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKanjiByIdV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKanjiByIdV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKanjiByIdV1RequestValidationError{}

// Validate checks the field values on GetKanjiByIdV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKanjiByIdV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKanjiByIdV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKanjiByIdV1ResponseMultiError, or nil if none found.
func (m *GetKanjiByIdV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKanjiByIdV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKanji()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetKanjiByIdV1ResponseValidationError{
					field:  "Kanji",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetKanjiByIdV1ResponseValidationError{
					field:  "Kanji",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKanji()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKanjiByIdV1ResponseValidationError{
				field:  "Kanji",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetKanjiByIdV1ResponseMultiError(errors)
	}
	return nil
}

// GetKanjiByIdV1ResponseMultiError is an error wrapping multiple validation
// errors returned by GetKanjiByIdV1Response.ValidateAll() if the designated
// constraints aren't met.
type GetKanjiByIdV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKanjiByIdV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKanjiByIdV1ResponseMultiError) AllErrors() []error { return m }

// GetKanjiByIdV1ResponseValidationError is the validation error returned by
// GetKanjiByIdV1Response.Validate if the designated constraints aren't met.
type GetKanjiByIdV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKanjiByIdV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKanjiByIdV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKanjiByIdV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKanjiByIdV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKanjiByIdV1ResponseValidationError) ErrorName() string {
	return "GetKanjiByIdV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKanjiByIdV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKanjiByIdV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKanjiByIdV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKanjiByIdV1ResponseValidationError{}

// Validate checks the field values on ListKanjiByLevelV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKanjiByLevelV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiByLevelV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKanjiByLevelV1RequestMultiError, or nil if none found.
func (m *ListKanjiByLevelV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiByLevelV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLevel() <= 0 {
		err := ListKanjiByLevelV1RequestValidationError{
			field:  "Level",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() >= 1000 {
		err := ListKanjiByLevelV1RequestValidationError{
			field:  "Limit",
			reason: "value must be less than 1000",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return ListKanjiByLevelV1RequestMultiError(errors)
	}
	return nil
}

// ListKanjiByLevelV1RequestMultiError is an error wrapping multiple validation
// errors returned by ListKanjiByLevelV1Request.ValidateAll() if the
// designated constraints aren't met.
type ListKanjiByLevelV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiByLevelV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiByLevelV1RequestMultiError) AllErrors() []error { return m }

// ListKanjiByLevelV1RequestValidationError is the validation error returned by
// ListKanjiByLevelV1Request.Validate if the designated constraints aren't met.
type ListKanjiByLevelV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiByLevelV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiByLevelV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiByLevelV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiByLevelV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiByLevelV1RequestValidationError) ErrorName() string {
	return "ListKanjiByLevelV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiByLevelV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiByLevelV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiByLevelV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiByLevelV1RequestValidationError{}

// Validate checks the field values on ListKanjiByIdsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKanjiByIdsV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiByIdsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKanjiByIdsV1RequestMultiError, or nil if none found.
func (m *ListKanjiByIdsV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiByIdsV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKanjiId() {
		_, _ = idx, item

		if item <= 0 {
			err := ListKanjiByIdsV1RequestValidationError{
				field:  fmt.Sprintf("KanjiId[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListKanjiByIdsV1RequestMultiError(errors)
	}
	return nil
}

// ListKanjiByIdsV1RequestMultiError is an error wrapping multiple validation
// errors returned by ListKanjiByIdsV1Request.ValidateAll() if the designated
// constraints aren't met.
type ListKanjiByIdsV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiByIdsV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiByIdsV1RequestMultiError) AllErrors() []error { return m }

// ListKanjiByIdsV1RequestValidationError is the validation error returned by
// ListKanjiByIdsV1Request.Validate if the designated constraints aren't met.
type ListKanjiByIdsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiByIdsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiByIdsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiByIdsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiByIdsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiByIdsV1RequestValidationError) ErrorName() string {
	return "ListKanjiByIdsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiByIdsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiByIdsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiByIdsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiByIdsV1RequestValidationError{}

// Validate checks the field values on ListKanjiV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKanjiV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKanjiV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKanjiV1ResponseMultiError, or nil if none found.
func (m *ListKanjiV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKanjiV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKanji() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKanjiV1ResponseValidationError{
						field:  fmt.Sprintf("Kanji[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKanjiV1ResponseValidationError{
						field:  fmt.Sprintf("Kanji[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKanjiV1ResponseValidationError{
					field:  fmt.Sprintf("Kanji[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKanjiV1ResponseMultiError(errors)
	}
	return nil
}

// ListKanjiV1ResponseMultiError is an error wrapping multiple validation
// errors returned by ListKanjiV1Response.ValidateAll() if the designated
// constraints aren't met.
type ListKanjiV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKanjiV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKanjiV1ResponseMultiError) AllErrors() []error { return m }

// ListKanjiV1ResponseValidationError is the validation error returned by
// ListKanjiV1Response.Validate if the designated constraints aren't met.
type ListKanjiV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKanjiV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKanjiV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKanjiV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKanjiV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKanjiV1ResponseValidationError) ErrorName() string {
	return "ListKanjiV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKanjiV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKanjiV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKanjiV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKanjiV1ResponseValidationError{}
